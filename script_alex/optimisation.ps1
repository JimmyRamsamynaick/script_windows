<#
.SYNOPSIS
    Script d'optimisation syst√®me pour Windows

.DESCRIPTION
    Ce script effectue diverses optimisations syst√®me pour am√©liorer les performances
    et la stabilit√© de Windows. Il inclut le nettoyage de fichiers temporaires,
    l'optimisation de la m√©moire, la d√©fragmentation, et diverses optimisations du registre.

    Fonctionnalit√©s :
    - Nettoyage des fichiers temporaires et cache
    - Optimisation de la m√©moire et des services
    - D√©fragmentation des disques (si n√©cessaire)
    - Optimisations du registre Windows
    - Nettoyage du registre
    - Optimisation du d√©marrage
    - V√©rification et r√©paration des fichiers syst√®me
    - Optimisation des param√®tres r√©seau

.PARAMETER OptimizationLevel
    Niveau d'optimisation: Basic, Standard, Advanced, Custom

.PARAMETER IncludeRegistry
    Inclure les optimisations du registre (n√©cessite des droits administrateur)

.PARAMETER IncludeDefrag
    Inclure la d√©fragmentation des disques

.PARAMETER IncludeSystemFiles
    V√©rifier et r√©parer les fichiers syst√®me (sfc /scannow, dism)

.PARAMETER IncludeStartup
    Optimiser les programmes de d√©marrage

.PARAMETER CreateRestorePoint
    Cr√©er un point de restauration avant les modifications

.PARAMETER RebootAfter
    Red√©marrer automatiquement apr√®s optimisation

.PARAMETER LogLevel
    Niveau de d√©tail des logs: Minimal, Standard, Detailed

.EXAMPLE
    .\optimisation.ps1
    Optimisation de base sans modifications du registre

.EXAMPLE
    .\optimisation.ps1 -OptimizationLevel Advanced -IncludeRegistry -CreateRestorePoint
    Optimisation avanc√©e avec registre et point de restauration

.EXAMPLE
    .\optimisation.ps1 -OptimizationLevel Custom -IncludeDefrag -IncludeSystemFiles
    Optimisation personnalis√©e avec d√©fragmentation et v√©rification syst√®me

.NOTES
    Auteur: Alex
    Date: 28/10/2025
    Version: 1.0
    
    Pr√©requis:
    - PowerShell 5.1 ou sup√©rieur
    - Droits administrateur recommand√©s pour certaines optimisations
    - Windows 10/11 ou Windows Server 2016+
    
    ATTENTION: Certaines optimisations peuvent n√©cessiter un red√©marrage
#>

[CmdletBinding()]
param(
    [Parameter(Mandatory=$false, HelpMessage="Niveau d'optimisation")]
    [ValidateSet("Basic", "Standard", "Advanced", "Custom")]
    [string]$OptimizationLevel = "Standard",
    
    [Parameter(Mandatory=$false, HelpMessage="Inclure les optimisations du registre")]
    [switch]$IncludeRegistry,
    
    [Parameter(Mandatory=$false, HelpMessage="Inclure la d√©fragmentation")]
    [switch]$IncludeDefrag,
    
    [Parameter(Mandatory=$false, HelpMessage="V√©rifier les fichiers syst√®me")]
    [switch]$IncludeSystemFiles,
    
    [Parameter(Mandatory=$false, HelpMessage="Optimiser le d√©marrage")]
    [switch]$IncludeStartup,
    
    [Parameter(Mandatory=$false, HelpMessage="Cr√©er un point de restauration")]
    [switch]$CreateRestorePoint,
    
    [Parameter(Mandatory=$false, HelpMessage="Red√©marrer apr√®s optimisation")]
    [switch]$RebootAfter,
    
    [Parameter(Mandatory=$false, HelpMessage="Niveau de d√©tail des logs")]
    [ValidateSet("Minimal", "Standard", "Detailed")]
    [string]$LogLevel = "Standard"
)

# Configuration
$ErrorActionPreference = "Continue"  # Continue pour √©viter l'arr√™t sur erreurs mineures
$script:ScriptName = [System.IO.Path]::GetFileNameWithoutExtension($PSCommandPath)
$script:LogPath = Join-Path $env:TEMP "$($script:ScriptName)_$(Get-Date -Format 'yyyyMMdd_HHmmss').log"
$script:IsAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")

# Statistiques globales
$script:Stats = @{
    FilesDeleted = 0
    SpaceFreed = 0
    OptimizationsApplied = 0
    ErrorsEncountered = 0
    StartTime = Get-Date
}

# Fonctions utilitaires
function Write-Log {
    param(
        [string]$Message,
        [ValidateSet("INFO", "WARN", "ERROR", "SUCCESS", "DEBUG")]
        [string]$Level = "INFO",
        [switch]$NoConsole
    )
    
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logEntry = "[$timestamp] [$Level] $Message"
    
    # Filtrage selon le niveau de log
    $shouldLog = switch ($LogLevel) {
        "Minimal" { $Level -in @("ERROR", "SUCCESS") }
        "Standard" { $Level -in @("INFO", "WARN", "ERROR", "SUCCESS") }
        "Detailed" { $true }
        default { $true }
    }
    
    if ($shouldLog -and -not $NoConsole) {
        $color = switch($Level) {
            "ERROR" { "Red" }
            "WARN"  { "Yellow" }
            "INFO"  { "Green" }
            "SUCCESS" { "Cyan" }
            "DEBUG" { "Gray" }
            default { "White" }
        }
        Write-Host $logEntry -ForegroundColor $color
    }
    
    try {
        $logEntry | Out-File -FilePath $script:LogPath -Append -Encoding UTF8
    }
    catch {
        # Ignorer les erreurs de log
    }
}

function Test-AdminRights {
    if (-not $script:IsAdmin) {
        Write-Log "‚ö†Ô∏è  Certaines optimisations n√©cessitent des droits administrateur" -Level "WARN"
        return $false
    }
    return $true
}

function Format-FileSize {
    param([long]$Size)
    
    $units = @("B", "KB", "MB", "GB", "TB")
    $unitIndex = 0
    $sizeValue = [double]$Size
    
    while ($sizeValue -ge 1024 -and $unitIndex -lt ($units.Length - 1)) {
        $sizeValue /= 1024
        $unitIndex++
    }
    
    return "{0:N2} {1}" -f $sizeValue, $units[$unitIndex]
}

function New-RestorePoint {
    if (-not $script:IsAdmin) {
        Write-Log "Droits administrateur requis pour cr√©er un point de restauration" -Level "WARN"
        return $false
    }
    
    try {
        Write-Log "Cr√©ation d'un point de restauration..." -Level "INFO"
        
        # V√©rifier si la restauration syst√®me est activ√©e
        $restoreStatus = Get-ComputerRestorePoint -ErrorAction SilentlyContinue
        if (-not $restoreStatus) {
            Write-Log "La restauration syst√®me n'est pas activ√©e" -Level "WARN"
            return $false
        }
        
        # Cr√©er le point de restauration
        $description = "Optimisation syst√®me - $(Get-Date -Format 'dd/MM/yyyy HH:mm')"
        Checkpoint-Computer -Description $description -RestorePointType "MODIFY_SETTINGS"
        
        Write-Log "‚úÖ Point de restauration cr√©√©: $description" -Level "SUCCESS"
        return $true
    }
    catch {
        Write-Log "Erreur lors de la cr√©ation du point de restauration: $($_.Exception.Message)" -Level "ERROR"
        return $false
    }
}

function Clear-TemporaryFiles {
    Write-Log "üßπ Nettoyage des fichiers temporaires..." -Level "INFO"
    
    $tempPaths = @(
        @{Path = $env:TEMP; Description = "Fichiers temporaires utilisateur"},
        @{Path = "$env:WINDIR\Temp"; Description = "Fichiers temporaires syst√®me"},
        @{Path = "$env:WINDIR\Prefetch"; Description = "Fichiers de pr√©chargement"},
        @{Path = "$env:LOCALAPPDATA\Microsoft\Windows\INetCache"; Description = "Cache Internet Explorer"},
        @{Path = "$env:LOCALAPPDATA\Temp"; Description = "Fichiers temporaires locaux"}
    )
    
    $totalFreed = 0
    $totalFiles = 0
    
    foreach ($tempPath in $tempPaths) {
        try {
            if (Test-Path $tempPath.Path) {
                Write-Log "Nettoyage: $($tempPath.Description)" -Level "DEBUG"
                
                $filesBefore = (Get-ChildItem -Path $tempPath.Path -Recurse -File -ErrorAction SilentlyContinue | Measure-Object).Count
                $sizeBefore = (Get-ChildItem -Path $tempPath.Path -Recurse -File -ErrorAction SilentlyContinue | Measure-Object -Property Length -Sum).Sum
                
                # Supprimer les fichiers (ignorer les erreurs d'acc√®s)
                Get-ChildItem -Path $tempPath.Path -Recurse -File -ErrorAction SilentlyContinue | 
                    Where-Object { $_.LastWriteTime -lt (Get-Date).AddDays(-1) } |
                    Remove-Item -Force -ErrorAction SilentlyContinue
                
                # Supprimer les dossiers vides
                Get-ChildItem -Path $tempPath.Path -Recurse -Directory -ErrorAction SilentlyContinue | 
                    Where-Object { (Get-ChildItem -Path $_.FullName -ErrorAction SilentlyContinue).Count -eq 0 } |
                    Remove-Item -Force -Recurse -ErrorAction SilentlyContinue
                
                $filesAfter = (Get-ChildItem -Path $tempPath.Path -Recurse -File -ErrorAction SilentlyContinue | Measure-Object).Count
                $sizeAfter = (Get-ChildItem -Path $tempPath.Path -Recurse -File -ErrorAction SilentlyContinue | Measure-Object -Property Length -Sum).Sum
                
                $filesDeleted = $filesBefore - $filesAfter
                $spaceFreed = $sizeBefore - $sizeAfter
                
                if ($filesDeleted -gt 0) {
                    Write-Log "  ‚úÖ $filesDeleted fichiers supprim√©s, $(Format-FileSize $spaceFreed) lib√©r√©s" -Level "SUCCESS"
                    $totalFiles += $filesDeleted
                    $totalFreed += $spaceFreed
                }
            }
        }
        catch {
            Write-Log "Erreur lors du nettoyage de $($tempPath.Path): $($_.Exception.Message)" -Level "WARN"
            $script:Stats.ErrorsEncountered++
        }
    }
    
    $script:Stats.FilesDeleted += $totalFiles
    $script:Stats.SpaceFreed += $totalFreed
    
    Write-Log "‚úÖ Nettoyage termin√©: $totalFiles fichiers, $(Format-FileSize $totalFreed) lib√©r√©s" -Level "SUCCESS"
}

function Clear-BrowserCache {
    Write-Log "üåê Nettoyage des caches navigateurs..." -Level "INFO"
    
    $browserCaches = @(
        @{Path = "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Cache"; Browser = "Chrome"},
        @{Path = "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Cache"; Browser = "Edge"},
        @{Path = "$env:APPDATA\Mozilla\Firefox\Profiles\*\cache2"; Browser = "Firefox"}
    )
    
    foreach ($cache in $browserCaches) {
        try {
            $paths = Get-ChildItem -Path (Split-Path $cache.Path) -Directory -ErrorAction SilentlyContinue | 
                     Where-Object { $_.FullName -like $cache.Path }
            
            foreach ($path in $paths) {
                if (Test-Path $path.FullName) {
                    $sizeBefore = (Get-ChildItem -Path $path.FullName -Recurse -File -ErrorAction SilentlyContinue | 
                                  Measure-Object -Property Length -Sum).Sum
                    
                    Remove-Item -Path "$($path.FullName)\*" -Recurse -Force -ErrorAction SilentlyContinue
                    
                    $sizeAfter = (Get-ChildItem -Path $path.FullName -Recurse -File -ErrorAction SilentlyContinue | 
                                 Measure-Object -Property Length -Sum).Sum
                    
                    $spaceFreed = $sizeBefore - $sizeAfter
                    if ($spaceFreed -gt 0) {
                        Write-Log "  ‚úÖ Cache $($cache.Browser): $(Format-FileSize $spaceFreed) lib√©r√©s" -Level "SUCCESS"
                        $script:Stats.SpaceFreed += $spaceFreed
                    }
                }
            }
        }
        catch {
            Write-Log "Erreur lors du nettoyage du cache $($cache.Browser): $($_.Exception.Message)" -Level "WARN"
        }
    }
}

function Optimize-Memory {
    Write-Log "üß† Optimisation de la m√©moire..." -Level "INFO"
    
    try {
        # Forcer la collecte des ordures .NET
        [System.GC]::Collect()
        [System.GC]::WaitForPendingFinalizers()
        [System.GC]::Collect()
        
        # Vider le cache DNS
        if ($script:IsAdmin) {
            Clear-DnsClientCache
            Write-Log "  ‚úÖ Cache DNS vid√©" -Level "SUCCESS"
        }
        
        # Optimiser la m√©moire virtuelle (si admin)
        if ($script:IsAdmin) {
            try {
                # Vider les fichiers de pagination inactifs
                $result = Invoke-Expression "rundll32.exe advapi32.dll,ProcessIdleTasks" -ErrorAction SilentlyContinue
                Write-Log "  ‚úÖ T√¢ches inactives trait√©es" -Level "SUCCESS"
            }
            catch {
                Write-Log "Impossible d'optimiser les t√¢ches inactives" -Level "DEBUG"
            }
        }
        
        $script:Stats.OptimizationsApplied++
        Write-Log "‚úÖ Optimisation m√©moire termin√©e" -Level "SUCCESS"
    }
    catch {
        Write-Log "Erreur lors de l'optimisation m√©moire: $($_.Exception.Message)" -Level "ERROR"
        $script:Stats.ErrorsEncountered++
    }
}

function Optimize-Services {
    if (-not $script:IsAdmin) {
        Write-Log "Droits administrateur requis pour optimiser les services" -Level "WARN"
        return
    }
    
    Write-Log "‚öôÔ∏è Optimisation des services..." -Level "INFO"
    
    # Services √† d√©sactiver (avec pr√©caution)
    $servicesToOptimize = @(
        @{Name = "Fax"; Action = "Disable"; Description = "Service de t√©l√©copie"},
        @{Name = "TabletInputService"; Action = "Manual"; Description = "Service d'entr√©e Tablet PC"},
        @{Name = "WSearch"; Action = "Manual"; Description = "Windows Search (si non utilis√©)"}
    )
    
    foreach ($serviceConfig in $servicesToOptimize) {
        try {
            $service = Get-Service -Name $serviceConfig.Name -ErrorAction SilentlyContinue
            if ($service) {
                $currentStartType = (Get-WmiObject -Class Win32_Service -Filter "Name='$($serviceConfig.Name)'").StartMode
                
                if ($serviceConfig.Action -eq "Disable" -and $currentStartType -ne "Disabled") {
                    Set-Service -Name $serviceConfig.Name -StartupType Disabled
                    Write-Log "  ‚úÖ Service $($serviceConfig.Name) d√©sactiv√©" -Level "SUCCESS"
                    $script:Stats.OptimizationsApplied++
                }
                elseif ($serviceConfig.Action -eq "Manual" -and $currentStartType -eq "Auto") {
                    Set-Service -Name $serviceConfig.Name -StartupType Manual
                    Write-Log "  ‚úÖ Service $($serviceConfig.Name) configur√© en manuel" -Level "SUCCESS"
                    $script:Stats.OptimizationsApplied++
                }
            }
        }
        catch {
            Write-Log "Erreur lors de l'optimisation du service $($serviceConfig.Name): $($_.Exception.Message)" -Level "WARN"
        }
    }
}

function Optimize-Registry {
    if (-not $IncludeRegistry -or -not $script:IsAdmin) {
        Write-Log "Optimisations du registre ignor√©es (droits admin requis ou non demand√©es)" -Level "INFO"
        return
    }
    
    Write-Log "üìù Optimisation du registre..." -Level "INFO"
    
    $registryOptimizations = @(
        @{
            Path = "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management"
            Name = "ClearPageFileAtShutdown"
            Value = 0
            Type = "DWORD"
            Description = "Ne pas vider le fichier de pagination √† l'arr√™t"
        },
        @{
            Path = "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management"
            Name = "DisablePagingExecutive"
            Value = 1
            Type = "DWORD"
            Description = "Garder le noyau en m√©moire"
        },
        @{
            Path = "HKCU:\Control Panel\Desktop"
            Name = "AutoEndTasks"
            Value = "1"
            Type = "String"
            Description = "Fermeture automatique des t√¢ches"
        },
        @{
            Path = "HKCU:\Control Panel\Desktop"
            Name = "HungAppTimeout"
            Value = "1000"
            Type = "String"
            Description = "Timeout pour applications qui ne r√©pondent pas"
        }
    )
    
    foreach ($optimization in $registryOptimizations) {
        try {
            # Cr√©er le chemin si n√©cessaire
            if (-not (Test-Path $optimization.Path)) {
                New-Item -Path $optimization.Path -Force | Out-Null
            }
            
            # Appliquer l'optimisation
            Set-ItemProperty -Path $optimization.Path -Name $optimization.Name -Value $optimization.Value -Type $optimization.Type
            Write-Log "  ‚úÖ $($optimization.Description)" -Level "SUCCESS"
            $script:Stats.OptimizationsApplied++
        }
        catch {
            Write-Log "Erreur lors de l'optimisation registre $($optimization.Name): $($_.Exception.Message)" -Level "WARN"
            $script:Stats.ErrorsEncountered++
        }
    }
}

function Optimize-Startup {
    if (-not $IncludeStartup) {
        return
    }
    
    Write-Log "üöÄ Optimisation du d√©marrage..." -Level "INFO"
    
    try {
        # Analyser les programmes de d√©marrage
        $startupItems = Get-CimInstance -ClassName Win32_StartupCommand
        
        Write-Log "Programmes de d√©marrage d√©tect√©s: $($startupItems.Count)" -Level "INFO"
        
        # Afficher les programmes de d√©marrage pour information
        foreach ($item in $startupItems) {
            Write-Log "  - $($item.Name): $($item.Command)" -Level "DEBUG"
        }
        
        # Note: La d√©sactivation automatique des programmes de d√©marrage est risqu√©e
        # On se contente de les lister pour que l'utilisateur puisse d√©cider
        Write-Log "‚ÑπÔ∏è  Utilisez msconfig ou le Gestionnaire des t√¢ches pour d√©sactiver les programmes non n√©cessaires" -Level "INFO"
        
    }
    catch {
        Write-Log "Erreur lors de l'analyse du d√©marrage: $($_.Exception.Message)" -Level "ERROR"
    }
}

function Invoke-SystemFileCheck {
    if (-not $IncludeSystemFiles -or -not $script:IsAdmin) {
        return
    }
    
    Write-Log "üîß V√©rification des fichiers syst√®me..." -Level "INFO"
    
    try {
        # SFC Scan
        Write-Log "Ex√©cution de sfc /scannow..." -Level "INFO"
        $sfcResult = Start-Process -FilePath "sfc" -ArgumentList "/scannow" -Wait -PassThru -WindowStyle Hidden
        
        if ($sfcResult.ExitCode -eq 0) {
            Write-Log "  ‚úÖ SFC scan termin√© avec succ√®s" -Level "SUCCESS"
        } else {
            Write-Log "  ‚ö†Ô∏è  SFC scan termin√© avec des avertissements (code: $($sfcResult.ExitCode))" -Level "WARN"
        }
        
        # DISM Health Check
        Write-Log "V√©rification de l'int√©grit√© de l'image syst√®me..." -Level "INFO"
        $dismResult = Start-Process -FilePath "dism" -ArgumentList "/online", "/cleanup-image", "/checkhealth" -Wait -PassThru -WindowStyle Hidden
        
        if ($dismResult.ExitCode -eq 0) {
            Write-Log "  ‚úÖ Image syst√®me saine" -Level "SUCCESS"
        } else {
            Write-Log "  ‚ö†Ô∏è  Probl√®mes d√©tect√©s dans l'image syst√®me" -Level "WARN"
        }
        
        $script:Stats.OptimizationsApplied++
    }
    catch {
        Write-Log "Erreur lors de la v√©rification syst√®me: $($_.Exception.Message)" -Level "ERROR"
        $script:Stats.ErrorsEncountered++
    }
}

function Invoke-DiskDefragmentation {
    if (-not $IncludeDefrag) {
        return
    }
    
    Write-Log "üíø Analyse de la d√©fragmentation..." -Level "INFO"
    
    try {
        $drives = Get-Volume | Where-Object { $_.DriveType -eq "Fixed" -and $_.FileSystem -eq "NTFS" }
        
        foreach ($drive in $drives) {
            if ($drive.DriveLetter) {
                Write-Log "Analyse du lecteur $($drive.DriveLetter):" -Level "INFO"
                
                # V√©rifier si c'est un SSD (ne pas d√©fragmenter les SSD)
                $physicalDisk = Get-PhysicalDisk | Where-Object { $_.DeviceId -eq $drive.ObjectId }
                if ($physicalDisk -and $physicalDisk.MediaType -eq "SSD") {
                    Write-Log "  ‚ÑπÔ∏è  SSD d√©tect√© - d√©fragmentation ignor√©e" -Level "INFO"
                    continue
                }
                
                # Analyser la fragmentation
                $defragAnalysis = defrag "$($drive.DriveLetter):" /A
                Write-Log "  üìä Analyse de fragmentation termin√©e" -Level "INFO"
                
                # Note: La d√©fragmentation compl√®te peut prendre beaucoup de temps
                # On se contente de l'analyse pour ce script d'optimisation
                Write-Log "  ‚ÑπÔ∏è  Utilisez 'defrag $($drive.DriveLetter): /O' pour optimiser si n√©cessaire" -Level "INFO"
            }
        }
    }
    catch {
        Write-Log "Erreur lors de l'analyse de d√©fragmentation: $($_.Exception.Message)" -Level "ERROR"
    }
}

function Show-OptimizationSummary {
    $duration = (Get-Date) - $script:Stats.StartTime
    
    Write-Host "`n" + "="*80 -ForegroundColor Cyan
    Write-Host "üìä R√âSUM√â DE L'OPTIMISATION SYST√àME" -ForegroundColor Cyan
    Write-Host "="*80 -ForegroundColor Cyan
    
    Write-Host "üñ•Ô∏è  Ordinateur: $env:COMPUTERNAME" -ForegroundColor Green
    Write-Host "üìÖ Date: $(Get-Date -Format 'dd/MM/yyyy HH:mm:ss')" -ForegroundColor Green
    Write-Host "‚è±Ô∏è  Dur√©e: $($duration.Minutes)m $($duration.Seconds)s" -ForegroundColor Green
    Write-Host "üîß Niveau: $OptimizationLevel" -ForegroundColor Green
    Write-Host "üë§ Droits admin: $(if($script:IsAdmin){'Oui'}else{'Non'})" -ForegroundColor Green
    
    Write-Host "`nüìà STATISTIQUES:" -ForegroundColor Yellow
    Write-Host "   Fichiers supprim√©s: $($script:Stats.FilesDeleted)" -ForegroundColor White
    Write-Host "   Espace lib√©r√©: $(Format-FileSize $script:Stats.SpaceFreed)" -ForegroundColor White
    Write-Host "   Optimisations appliqu√©es: $($script:Stats.OptimizationsApplied)" -ForegroundColor White
    Write-Host "   Erreurs rencontr√©es: $($script:Stats.ErrorsEncountered)" -ForegroundColor White
    
    if ($script:Stats.ErrorsEncountered -eq 0) {
        Write-Host "`n‚úÖ OPTIMISATION TERMIN√âE AVEC SUCC√àS" -ForegroundColor Green
    } else {
        Write-Host "`n‚ö†Ô∏è  OPTIMISATION TERMIN√âE AVEC DES AVERTISSEMENTS" -ForegroundColor Yellow
    }
    
    Write-Host "`nüí° RECOMMANDATIONS:" -ForegroundColor Cyan
    Write-Host "   - Red√©marrez l'ordinateur pour appliquer toutes les optimisations" -ForegroundColor White
    Write-Host "   - Ex√©cutez ce script r√©guli√®rement (hebdomadaire recommand√©)" -ForegroundColor White
    Write-Host "   - Surveillez les performances apr√®s optimisation" -ForegroundColor White
    
    Write-Host "`n" + "="*80 -ForegroundColor Cyan
}

# Configuration des optimisations selon le niveau
function Set-OptimizationLevel {
    param([string]$Level)
    
    switch ($Level) {
        "Basic" {
            # Nettoyage de base uniquement
        }
        "Standard" {
            # Nettoyage + optimisations m√©moire
        }
        "Advanced" {
            # Tout sauf registre (sauf si explicitement demand√©)
            $script:IncludeStartup = $true
        }
        "Custom" {
            # Utilise les param√®tres fournis par l'utilisateur
        }
    }
}

# Script principal
try {
    Write-Log "üöÄ D√©but de l'optimisation syst√®me" -Level "SUCCESS"
    Write-Log "Niveau: $OptimizationLevel | Admin: $script:IsAdmin | Log: $LogLevel"
    
    # V√©rifier les droits administrateur si n√©cessaire
    if ($IncludeRegistry -or $IncludeSystemFiles) {
        Test-AdminRights | Out-Null
    }
    
    # Cr√©er un point de restauration si demand√©
    if ($CreateRestorePoint) {
        New-RestorePoint | Out-Null
    }
    
    # Configurer le niveau d'optimisation
    Set-OptimizationLevel -Level $OptimizationLevel
    
    # Ex√©cuter les optimisations
    Write-Log "`nüîÑ PHASE 1: Nettoyage des fichiers" -Level "INFO"
    Clear-TemporaryFiles
    Clear-BrowserCache
    
    Write-Log "`nüîÑ PHASE 2: Optimisation m√©moire et services" -Level "INFO"
    Optimize-Memory
    
    if ($OptimizationLevel -in @("Standard", "Advanced") -or $IncludeRegistry) {
        Optimize-Services
    }
    
    Write-Log "`nüîÑ PHASE 3: Optimisations avanc√©es" -Level "INFO"
    if ($OptimizationLevel -in @("Advanced") -or $IncludeRegistry) {
        Optimize-Registry
    }
    
    if ($IncludeStartup) {
        Optimize-Startup
    }
    
    Write-Log "`nüîÑ PHASE 4: V√©rifications syst√®me" -Level "INFO"
    if ($IncludeSystemFiles) {
        Invoke-SystemFileCheck
    }
    
    if ($IncludeDefrag) {
        Invoke-DiskDefragmentation
    }
    
    # Afficher le r√©sum√©
    Show-OptimizationSummary
    
    # Red√©marrage si demand√©
    if ($RebootAfter) {
        Write-Log "üîÑ Red√©marrage programm√© dans 60 secondes..." -Level "WARN"
        Write-Log "Appuyez sur Ctrl+C pour annuler" -Level "WARN"
        Start-Sleep -Seconds 60
        Restart-Computer -Force
    }
    
    Write-Log "‚úÖ Optimisation termin√©e avec succ√®s" -Level "SUCCESS"
    exit 0
}
catch {
    Write-Log "Erreur fatale: $($_.Exception.Message)" -Level "ERROR"
    Write-Log "Ligne: $($_.InvocationInfo.ScriptLineNumber)" -Level "ERROR"
    $script:Stats.ErrorsEncountered++
    exit 1
}
finally {
    Write-Log "üìÑ Log sauvegard√©: $script:LogPath" -Level "INFO"
}